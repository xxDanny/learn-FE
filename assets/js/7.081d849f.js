(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{1066:function(s,t,a){"use strict";a.r(t);var e=a(3),r=Object(e.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"正则表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式"}},[s._v("#")]),s._v(" 正则表达式")]),s._v(" "),t("h2",{attrs:{id:"什么是「正则表达式」"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是「正则表达式」"}},[s._v("#")]),s._v(" 什么是「正则表达式」？")]),s._v(" "),t("p",[s._v("正则表达式是表示搜索模式的字符串，常缩写成 "),t("code",[s._v("Regex")]),s._v(" 或 "),t("code",[s._v("Regexp")]),s._v(" 。它常用于查找和替换文本中的字词。此外，我们可以测试文本是否符合我们设置的规则。\n例如，您只想查找文件名列表中，扩展名是 pdf 的文件，那您只需跟着输入 "),t("code",[s._v("^\\w+\\.pdf$")]),s._v(" 就可以找到")]),s._v(" "),t("h2",{attrs:{id:"基本匹配"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本匹配"}},[s._v("#")]),s._v(" 基本匹配")]),s._v(" "),t("p",[s._v("我们想要查找的字符或单词可以直接输入，就像搜索一样。例如，要找出文本中的 "),t("code",[s._v("curious")]),s._v(" 一词，只需输入同样的内容。\n"),t("img",{attrs:{src:a(496),alt:""}})]),s._v(" "),t("h2",{attrs:{id:"匹配符号"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#匹配符号"}},[s._v("#")]),s._v(" . 匹配符号")]),s._v(" "),t("p",[t("code",[s._v(".")]),s._v(" 允许匹配任何字符，包括特殊字符和空格。但是不能匹配换行符号\n"),t("img",{attrs:{src:a(497),alt:""}})]),s._v(" "),t("h2",{attrs:{id:"字符集-abc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符集-abc"}},[s._v("#")]),s._v(" 字符集 "),t("code",[s._v("[abc]")])]),s._v(" "),t("p",[s._v("如果一个词中的字符可以是各种字符，我们就将所有的可选字符写进中括号 "),t("code",[s._v("[]")]),s._v(" 中。例如，为了查找文本中的所有单词，我们需要编写表达式，在 "),t("code",[s._v("[]")]),s._v(" 中相邻地输入字符 "),t("code",[s._v("a、e、i、o、u")]),s._v(" 。\n"),t("img",{attrs:{src:a(498),alt:""}})]),s._v(" "),t("h2",{attrs:{id:"否定字符集-abc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#否定字符集-abc"}},[s._v("#")]),s._v(" 否定字符集 "),t("code",[s._v("[^abc]")])]),s._v(" "),t("p",[s._v("为了查找下方文本的所有单词（ "),t("code",[s._v("ber")]),s._v(" 和 "),t("code",[s._v("bor")]),s._v(" 除外），请在 "),t("code",[s._v("[]")]),s._v(" 中的 "),t("code",[s._v("^")]),s._v(" 后面并排输入 "),t("code",[s._v("e")]),s._v(" 和 "),t("code",[s._v("o")]),s._v(" 。\n"),t("img",{attrs:{src:a(499),alt:""}})]),s._v(" "),t("h2",{attrs:{id:"字母范围-a-z"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字母范围-a-z"}},[s._v("#")]),s._v(" 字母范围 "),t("code",[s._v("[a-z]")])]),s._v(" "),t("p",[s._v("为了查找指定范围的字母，我们需要将起始字母和结束字母写进 "),t("code",[s._v("[]")]),s._v(" 中，中间用连字符 "),t("code",[s._v("-")]),s._v(" 分隔。它区分大小写。请编写表达式，匹配 "),t("code",[s._v("e")]),s._v(" 和 "),t("code",[s._v("o")]),s._v(" 之间所有的小写字母，包括它们本身\n"),t("img",{attrs:{src:a(500),alt:""}})]),s._v(" "),t("h3",{attrs:{id:"练习"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#练习"}},[s._v("#")]),s._v(" 练习")]),s._v(" "),t("p",[s._v("请编写表达式，匹配文本中所有字母、数字、空格和特殊字符。表达式必须匹配任何字符。")]),s._v(" "),t("div",{staticClass:"language-regexp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("/./g\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("请编写表达式，匹配除 "),t("code",[s._v("beor")]),s._v(" 和 "),t("code",[s._v("beur")]),s._v(" 以外的所有单词。要求使用否定字符集完成。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("bear beor beer beur\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("div",{staticClass:"language-regexp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("/be[^ou]r/g\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h2",{attrs:{id:"重复"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重复"}},[s._v("#")]),s._v(" 重复")]),s._v(" "),t("p",[s._v("一些特殊字符用来指定一个字符在文本中重复的次数。它们分别是加号 "),t("code",[s._v("+")]),s._v(" 、星号 "),t("code",[s._v("*")]),s._v(" 和问号 "),t("code",[s._v("?")]),s._v(" 。")]),s._v(" "),t("h2",{attrs:{id:"星号"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#星号"}},[s._v("#")]),s._v(" 星号 *")]),s._v(" "),t("p",[s._v("我们在字符后面加上 "),t("code",[s._v("*")]),s._v(" ，表示一个字符完全不匹配或可以匹配多次。例如，表示字母 "),t("code",[s._v("e")]),s._v(" 在下方文本中不出现，只出现 1 次或者并排出现多次。\n"),t("img",{attrs:{src:a(501),alt:""}})]),s._v(" "),t("h2",{attrs:{id:"加号-不包括-0-次"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#加号-不包括-0-次"}},[s._v("#")]),s._v(" 加号 + : 不包括 0 次")]),s._v(" "),t("p",[s._v("为了表示一个字符可以出现一次或多次，我们将 "),t("code",[s._v("+")]),s._v(" 放在它后面。例如，表示 "),t("code",[s._v("e")]),s._v(" 在下方文本中出现一次或多次。\n"),t("img",{attrs:{src:a(502),alt:""}})]),s._v(" "),t("h2",{attrs:{id:"问号"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#问号"}},[s._v("#")]),s._v(" 问号 ?")]),s._v(" "),t("p",[s._v("为了表示一个字符是可选的，我们在它后面加一个 "),t("code",[s._v("?")]),s._v(" 。例如，表示下方文本中的字母 "),t("code",[s._v("u")]),s._v(" 是可选的。\n"),t("img",{attrs:{src:a(503),alt:""}})]),s._v(" "),t("h2",{attrs:{id:"大括号"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#大括号"}},[s._v("#")]),s._v(" 大括号")]),s._v(" "),t("p",[s._v("为了表示一个字符出现的确切次数，我们在该字符的末尾，将它出现的次数写进大括号 "),t("code",[s._v("{}")]),s._v(" 中，如 "),t("code",[s._v("{n}")]),s._v(" 。例如，表示下方文本中的字母 "),t("code",[s._v("e")]),s._v(" 只能出现 2 次。\n"),t("img",{attrs:{src:a(504),alt:""}})]),s._v(" "),t("p",[s._v("为了表示一个字符至少出现多少次，我们在该字符的末尾，将它至少应出现的次数写进大括号 "),t("code",[s._v("{}")]),s._v(" 中，并在数字后面加上逗号 "),t("code",[s._v(",")]),s._v(" ，如 "),t("code",[s._v("{n, }")]),s._v(" 。例如，表示下方文本中的字母 "),t("code",[s._v("e")]),s._v(" 至少出现 "),t("code",[s._v("3")]),s._v(" 次。\n"),t("img",{attrs:{src:a(505),alt:""}})]),s._v(" "),t("p",[s._v("为了表示一些字符出现的次数在某个数字范围内，我们在该字符的末尾，将它至少和至多出现的次数写进大括号 "),t("code",[s._v("{}")]),s._v(" 中，中间用逗号 "),t("code",[s._v(",")]),s._v(" 分隔，如 "),t("code",[s._v("{x, y}")]),s._v(" 。例如，匹配下方文本中，字母 "),t("code",[s._v("e")]),s._v(" 出现 1 至 3 次的单词。\n"),t("img",{attrs:{src:a(506),alt:""}})]),s._v(" "),t("h3",{attrs:{id:"练习-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#练习-2"}},[s._v("#")]),s._v(" 练习")]),s._v(" "),t("p",[s._v("用 {} 编写表达式，匹配文本中的 4 位阿拉伯数字。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("Release 10/9/2021\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("div",{staticClass:"language-regexp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("/[0-9]{4}/g\n/\\d{4}/\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h2",{attrs:{id:"分组匹配"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分组匹配"}},[s._v("#")]),s._v(" 分组匹配")]),s._v(" "),t("p",[s._v("除了简单地判断是否匹配之外，正则表达式还有提取子串的强大功能。用 "),t("code",[s._v("()")]),s._v(" 表示的就是要提取的分组。")]),s._v(" "),t("p",[s._v("比如： "),t("code",[s._v("^(\\d{3})-(\\d{3,8})$")]),s._v(" 分别定义了两个组，可以直接从匹配的字符串中提取出区号和本地号码：")]),s._v(" "),t("div",{staticClass:"language-javascript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" re "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("^(\\d{3})-(\\d{3,8})$")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nre"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'010-12345'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ['010-12345', '010', '12345']")]),s._v("\nre"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'010 12345'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// null")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("如果正则表达式中定义了组，就可以在 RegExp 对象上用 "),t("code",[s._v("exec()")]),s._v(" 方法提取出子串来。\n"),t("code",[s._v("exec()")]),s._v(" 方法在匹配成功后，会返回一个 "),t("code",[s._v("Array")]),s._v(" ，第一个元素是正则表达式匹配到的整个字符串，后面的字符串表示匹配成功的子串。 "),t("code",[s._v("exec()")]),s._v(" 方法在匹配失败时返回 "),t("code",[s._v("null")]),s._v(" 。")]),s._v(" "),t("h2",{attrs:{id:"括号-分组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#括号-分组"}},[s._v("#")]),s._v(" 括号 ( ): 分组")]),s._v(" "),t("p",[s._v("我们可以对一个表达式进行分组，并用这些分组来引用或执行一些规则。为了给表达式分组，我们需要将文本包裹在 "),t("code",[s._v("()")]),s._v(" 中。现在，请尝试为下方文本中的 "),t("code",[s._v("haa")]),s._v(" 构造分组。\n"),t("img",{attrs:{src:a(507),alt:""}})]),s._v(" "),t("h2",{attrs:{id:"引用组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#引用组"}},[s._v("#")]),s._v(" 引用组")]),s._v(" "),t("p",[s._v("单词 "),t("code",[s._v("ha")]),s._v(" 和 "),t("code",[s._v("haa")]),s._v(" 分组如下。第一组用 "),t("code",[s._v("\\1")]),s._v(" 来避免重复书写。这里的 "),t("code",[s._v("1")]),s._v(" 表示分组的顺序。请在表达式的末尾键入 "),t("code",[s._v("\\2")]),s._v(" 以引用第二组。\n"),t("img",{attrs:{src:a(508),alt:""}})]),s._v(" "),t("h2",{attrs:{id:"括号-非捕获分组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#括号-非捕获分组"}},[s._v("#")]),s._v(" 括号 (?: ): 非捕获分组")]),s._v(" "),t("p",[s._v("您可以对表达式进行分组，并确保它不被引用捕获。例如，下面有两个分组，但我们用 "),t("code",[s._v("\\1")]),s._v(" 引用的第一个组实际上是指向第二个组，因为第一个是未被捕获的分组。\n"),t("img",{attrs:{src:a(509),alt:""}})]),s._v(" "),t("h2",{attrs:{id:"竖线"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#竖线"}},[s._v("#")]),s._v(" 竖线 |")]),s._v(" "),t("p",[s._v("竖线允许一个表达式包含多个不同的分支。所有分支用 "),t("code",[s._v("|")]),s._v(" 分隔。和在字符层面上运作的字符集 "),t("code",[s._v("[abc]")]),s._v(" 不同，分支在表达式层面上运作。例如，下面的表达式同时匹配 "),t("code",[s._v("cat")]),s._v(" 和 "),t("code",[s._v("Cat")]),s._v(" 。请在末尾添加另一个 "),t("code",[s._v("|")]),s._v(" ，并输入 "),t("code",[s._v("rat")]),s._v(" 以匹配所有单词。\n"),t("img",{attrs:{src:a(510),alt:""}})]),s._v(" "),t("h2",{attrs:{id:"转义字符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#转义字符"}},[s._v("#")]),s._v(" 转义字符 \\")]),s._v(" "),t("p",[s._v("在书写正则表达式时，我们会用到 "),t("code",[s._v("{ } [ ] / \\ + * . $^ | ?")]),s._v(" 这些特殊字符 。为了匹配这些特殊字符本身，我们需要通过 "),t("code",[s._v("\\")]),s._v(" 将它们转义。例如，要匹配文本中的 "),t("code",[s._v(".")]),s._v(" 和 "),t("code",[s._v("*")]),s._v(" ，我们需要在它们前面添加一个 "),t("code",[s._v("\\")]),s._v(" 。\n"),t("img",{attrs:{src:a(511),alt:""}})]),s._v(" "),t("h2",{attrs:{id:"插入符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#插入符"}},[s._v("#")]),s._v(" 插入符 ^")]),s._v(" "),t("p",[s._v("插入符 "),t("code",[s._v("^")]),s._v(" : 匹配字符串的开始。我们用 "),t("code",[s._v("[0-9]")]),s._v(" 查找数字，若仅查找行首的数字，请在表达式前面加上 "),t("code",[s._v("^")]),s._v(" 。\n"),t("img",{attrs:{src:a(512),alt:""}})]),s._v(" "),t("h2",{attrs:{id:"美元符号"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#美元符号"}},[s._v("#")]),s._v(" 美元符号 $")]),s._v(" "),t("p",[s._v("美元符号 "),t("code",[s._v("$")]),s._v(" : 匹配字符串的结束，让我们在 "),t("code",[s._v("html")]),s._v(" 的后面添加 "),t("code",[s._v("$")]),s._v(" ，来查找仅在行末出现的 "),t("code",[s._v("html")]),s._v(" 。\n"),t("img",{attrs:{src:a(513),alt:""}})]),s._v(" "),t("h2",{attrs:{id:"单词字符-w-字母、数字和下划线"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单词字符-w-字母、数字和下划线"}},[s._v("#")]),s._v(" 单词字符 \\w: 字母、数字和下划线")]),s._v(" "),t("p",[s._v("表达式 "),t("code",[s._v("\\w")]),s._v(" 用于查找字母、数字和下划线。让我们用表达式 "),t("code",[s._v("\\w")]),s._v(" 来查找文本中的单词字符。\n"),t("img",{attrs:{src:a(514),alt:""}})]),s._v(" "),t("h2",{attrs:{id:"非单词字符-w"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#非单词字符-w"}},[s._v("#")]),s._v(" 非单词字符 \\W")]),s._v(" "),t("p",[t("code",[s._v("\\W")]),s._v(" 匹配除字母、数字和下划线之外的字符。\n"),t("img",{attrs:{src:a(515),alt:""}})]),s._v(" "),t("h2",{attrs:{id:"数字字符-d"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数字字符-d"}},[s._v("#")]),s._v(" 数字字符 \\d")]),s._v(" "),t("p",[t("code",[s._v("\\d")]),s._v(" 仅用来匹配数字。\n"),t("img",{attrs:{src:a(516),alt:""}})]),s._v(" "),t("h2",{attrs:{id:"非数字字符-d"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#非数字字符-d"}},[s._v("#")]),s._v(" 非数字字符 \\D")]),s._v(" "),t("p",[t("code",[s._v("\\D")]),s._v(" 匹配除数字之外的字符。\n"),t("img",{attrs:{src:a(517),alt:""}})]),s._v(" "),t("h2",{attrs:{id:"空白符-s-非空白符-s"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#空白符-s-非空白符-s"}},[s._v("#")]),s._v(" 空白符 \\s & 非空白符 \\S")]),s._v(" "),t("p",[t("code",[s._v("\\s")]),s._v(" 仅匹配空白字符。")]),s._v(" "),t("p",[t("img",{attrs:{src:a(518),alt:""}})]),s._v(" "),t("p",[t("code",[s._v("\\S")]),s._v(" 匹配除空白符之外的字符\n"),t("img",{attrs:{src:a(519),alt:""}})]),s._v(" "),t("h2",{attrs:{id:"零宽断言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#零宽断言"}},[s._v("#")]),s._v(" 零宽断言")]),s._v(" "),t("p",[s._v("如果我们希望正在写的词语出现在另一个词语之前或之后，我们需要使用「零宽断言」。请前往下一步骤，学习如何使用「零宽断言」。")]),s._v(" "),t("h2",{attrs:{id:"正向先行断言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正向先行断言"}},[s._v("#")]),s._v(" 正向先行断言：(?=)")]),s._v(" "),t("p",[s._v("例如，我们要匹配文本中的小时值。为了只匹配后面有 "),t("code",[s._v("PM")]),s._v(" 的数值，我们需要在表达式后面使用正向先行断言 "),t("code",[s._v("(?=)")]),s._v(" ，并在括号内的 "),t("code",[s._v("=")]),s._v(" 后面添加 "),t("code",[s._v("PM")]),s._v(" 。\n"),t("img",{attrs:{src:a(520),alt:""}})]),s._v(" "),t("h2",{attrs:{id:"负向先行断言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#负向先行断言"}},[s._v("#")]),s._v(" 负向先行断言：(?!)")]),s._v(" "),t("p",[s._v("例如，我们要在文本中匹配除小时值以外的数字。我们需要在表达式后面使用负向先行断言 "),t("code",[s._v("(?!)")]),s._v(" ，并在括号内的 "),t("code",[s._v("!")]),s._v(" 后面添加 "),t("code",[s._v("PM")]),s._v(" ，从而只匹配没有 "),t("code",[s._v("PM")]),s._v(" 的数值。\n"),t("img",{attrs:{src:a(521),alt:""}})]),s._v(" "),t("h2",{attrs:{id:"正向后行断言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正向后行断言"}},[s._v("#")]),s._v(" 正向后行断言：(?<=)")]),s._v(" "),t("p",[s._v("例如，我们要匹配文本中的金额数。为了只匹配前面带有 "),t("code",[s._v("$")]),s._v(" 的数字。我们要在表达式前面使用正向后行断言 "),t("code",[s._v("(?<=)")]),s._v(" ，并在括号内的 "),t("code",[s._v("=")]),s._v(" 后面添加 "),t("code",[s._v("\\$")]),s._v(" 。\n"),t("img",{attrs:{src:a(522),alt:""}})]),s._v(" "),t("h2",{attrs:{id:"负向后行断言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#负向后行断言"}},[s._v("#")]),s._v(" 负向后行断言：(?<!)")]),s._v(" "),t("p",[s._v("例如，我们要在文本中匹配除价格外的数字。为了只匹配前面没有 "),t("code",[s._v("$")]),s._v(" 的数字，我们要在表达式前用负向后行断言 "),t("code",[s._v("(?<!)")]),s._v(" ，并在括号内的 "),t("code",[s._v("!")]),s._v(" 后面添加 "),t("code",[s._v("\\$")]),s._v(" 。\n"),t("img",{attrs:{src:a(523),alt:""}})]),s._v(" "),t("h2",{attrs:{id:"标志"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标志"}},[s._v("#")]),s._v(" 标志")]),s._v(" "),t("p",[s._v("标志改变表达式的输出。这就是标志也称为 "),t("strong",[s._v("修饰符")]),s._v(" 的原因。标志决定表达式是否将文本视作单独的行处理，是否区分大小写，或者是否查找所有匹配项。")]),s._v(" "),t("h3",{attrs:{id:"全局标志"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#全局标志"}},[s._v("#")]),s._v(" 全局标志")]),s._v(" "),t("p",[s._v("全局标志使表达式选中所有匹配项，如果不启用全局标志，那么表达式只会匹配第一个匹配项。现在，请启用全局标志，以便匹配所有匹配项。\n"),t("img",{attrs:{src:a(524),alt:""}})]),s._v(" "),t("h3",{attrs:{id:"多行标志"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多行标志"}},[s._v("#")]),s._v(" 多行标志")]),s._v(" "),t("p",[s._v("正则表达式将所有文本视作一行。但如果我们使用了多行标志，它就会单独处理每一行。这次，我们将根据每一行行末的规律来写出表达式，现在，请启用多行标志来查找所有匹配项。\n"),t("img",{attrs:{src:a(525),alt:""}})]),s._v(" "),t("h3",{attrs:{id:"忽略大小写标志"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#忽略大小写标志"}},[s._v("#")]),s._v(" 忽略大小写标志")]),s._v(" "),t("p",[s._v("为了使我们编写的表达式不再大小写敏感，我们必须启用 "),t("strong",[s._v("不区分大小写")]),s._v(" 标志。\n"),t("img",{attrs:{src:a(526),alt:""}})]),s._v(" "),t("h2",{attrs:{id:"贪婪匹配"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#贪婪匹配"}},[s._v("#")]),s._v(" 贪婪匹配")]),s._v(" "),t("p",[s._v("正则表达式默认执行贪婪匹配。这意味着匹配内容会尽可能长。请看下面的示例，它匹配任何以 "),t("code",[s._v("r")]),s._v(" 结尾的字符串，以及前面带有该字符串的文本，但它不会在第一个 "),t("code",[s._v("r")]),s._v(" 处停止匹配\n"),t("img",{attrs:{src:a(527),alt:""}})]),s._v(" "),t("h2",{attrs:{id:"懒惰匹配"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#懒惰匹配"}},[s._v("#")]),s._v(" 懒惰匹配")]),s._v(" "),t("p",[s._v("与贪婪匹配不同，懒惰匹配在第一次匹配时停止。下面的例子中，在 "),t("code",[s._v("*")]),s._v(" 之后添加 "),t("code",[s._v("?")]),s._v(" ，将查找以 "),t("code",[s._v("r")]),s._v(" 结尾且前面带有任意字符的第一个匹配项。这意味着本次匹配将会在第一个字母 "),t("code",[s._v("r")]),s._v(" 处停止。\n"),t("img",{attrs:{src:a(528),alt:""}})]),s._v(" "),t("h2",{attrs:{id:"regexp-对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#regexp-对象"}},[s._v("#")]),s._v(" RegExp 对象")]),s._v(" "),t("p",[s._v("新建正则表达式有两种方法。一种是使用字面量，以斜杠表示开始和结束。")]),s._v(" "),t("div",{staticClass:"language-javascript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" regex "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("xyz")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("div",{staticClass:"language-javascript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" regex "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RegExp")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'xyz'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("上面两种写法是等价的，都新建了一个内容为 xyz 的正则表达式对象。它们的主要区别是，第一种方法在引擎编译代码时，就会新建正则表达式，第二种方法在运行时新建正则表达式，所以前者的效率较高。而且，前者比较便利和直观，所以实际应用中，基本上都采用字面量定义正则表达式。")]),s._v(" "),t("p",[s._v("RegExp 构造函数还可以接受第二个参数，表示修饰符")]),s._v(" "),t("div",{staticClass:"language-javascript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" regex "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RegExp")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'xyz'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'i'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 等价于")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" regex "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("xyz")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-flags"}},[s._v("i")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h2",{attrs:{id:"regexp-对象实例方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#regexp-对象实例方法"}},[s._v("#")]),s._v(" RegExp 对象实例方法")]),s._v(" "),t("h3",{attrs:{id:"regexp-prototype-test"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#regexp-prototype-test"}},[s._v("#")]),s._v(" RegExp.prototype.test()")]),s._v(" "),t("p",[s._v("正则实例对象的 test 方法返回一个布尔值，表示当前模式是否能匹配参数字符串。")]),s._v(" "),t("div",{staticClass:"language-javascript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("cat")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'cats and dogs'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("上面代码验证参数字符串之中是否包含 cat ，结果返回 true。")]),s._v(" "),t("h3",{attrs:{id:"regexp-prototype-exec"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#regexp-prototype-exec"}},[s._v("#")]),s._v(" RegExp.prototype.exec()")]),s._v(" "),t("p",[s._v("正则实例对象的 "),t("code",[s._v("exec()")]),s._v(" 方法，用来返回匹配结果。如果发现匹配，就返回一个数组，成员是匹配成功的子字符串，否则返回 "),t("code",[s._v("null")]),s._v(" 。")]),s._v(" "),t("div",{staticClass:"language-javascript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" s "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'_x_x'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" r1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("x")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" r2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("y")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\nr1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// ["x"]')]),s._v("\nr2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// null")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("上面代码中，正则对象 r1 匹配成功，返回一个数组，成员是匹配结果；正则对象 r2 匹配失败，返回 null。")]),s._v(" "),t("p",[s._v("如果正则表示式包含圆括号（即含有“组匹配”），则返回的数组会包括多个成员。第一个成员是整个匹配成功的结果，后面的成员就是圆括号对应的匹配成功的组。也就是说，第二个成员对应第一个括号，第三个成员对应第二个括号，以此类推。整个数组的 length 属性等于组匹配的数量再加 1 。")]),s._v(" "),t("div",{staticClass:"language-javascript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" s "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'_x_x'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" r "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("_(x)")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\nr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// ["_x", "x"]')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("上面代码的 exec() 方法，返回一个数组。第一个成员是整个匹配的结果，第二个成员是圆括号匹配的结果。")]),s._v(" "),t("p",[t("code",[s._v("exec()")]),s._v(" 方法的返回数组还包含以下两个属性：")]),s._v(" "),t("ul",[t("li",[s._v("input：整个原字符串。")]),s._v(" "),t("li",[s._v("index：模式匹配成功的开始位置（从 0 开始计数）")])]),s._v(" "),t("div",{staticClass:"language-javascript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" r "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("a(b+)a")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" arr "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" r"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'_abbba_aba_'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\narr "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// ["abbba", "bbb"]')]),s._v("\n\narr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("index "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1")]),s._v("\narr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("input "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "_abbba_aba_"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("上面代码中的 "),t("code",[s._v("index")]),s._v(" 属性等于 1，是因为从原字符串的第二个位置开始匹配成功。")]),s._v(" "),t("p",[s._v("如果正则表达式加上 g 修饰符，则可以使用多次 exec() 方法，下一次搜索的位置从上一次匹配成功结束的位置开始。")]),s._v(" "),t("div",{staticClass:"language-javascript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" reg "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("a")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-flags"}},[s._v("g")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" str "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'abc_abc_abc'")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" r1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" reg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nr1 "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// ["a"]')]),s._v("\nr1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("index "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 0")]),s._v("\nreg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lastIndex "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" r2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" reg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nr2 "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// ["a"]')]),s._v("\nr2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("index "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 4")]),s._v("\nreg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lastIndex "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 5")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" r3 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" reg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nr3 "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// ["a"]')]),s._v("\nr3"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("index "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 8")]),s._v("\nreg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lastIndex "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 9")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" r4 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" reg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nr4 "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// null")]),s._v("\nreg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lastIndex "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 0")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br")])]),t("p",[s._v("上面代码连续用了四次 exec() 方法，前三次都是从上一次匹配结束的位置向后匹配。当第三次匹配结束以后，整个字符串已经到达尾部，匹配结果返回 null，正则实例对象的 lastIndex 属性也重置为 0，意味着第四次匹配将从头开始。")]),s._v(" "),t("h2",{attrs:{id:"字符串的实例方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串的实例方法"}},[s._v("#")]),s._v(" 字符串的实例方法")]),s._v(" "),t("p",[s._v("字符串的实例方法之中，有 4 种与正则表达式有关。")]),s._v(" "),t("ul",[t("li",[s._v("String.prototype.match()：返回一个数组，成员是所有匹配的子字符串。")]),s._v(" "),t("li",[s._v("String.prototype.search()：按照给定的正则表达式进行搜索，返回一个整数，表示匹配开始的位置。")]),s._v(" "),t("li",[s._v("String.prototype.replace()：按照给定的正则表达式进行替换，返回替换后的字符串。")]),s._v(" "),t("li",[s._v("String.prototype.split()：按照给定规则进行字符串分割，返回一个数组，包含分割后的各个成员。")])]),s._v(" "),t("h3",{attrs:{id:"string-prototype-match"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-match"}},[s._v("#")]),s._v(" String.prototype.match()")]),s._v(" "),t("p",[s._v("字符串实例对象的 match 方法对字符串进行正则匹配，返回匹配结果。")]),s._v(" "),t("div",{staticClass:"language-javascript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" s "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'_x_x'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" r1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("x")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" r2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("y")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\ns"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("r1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// ["x"]')]),s._v("\ns"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("r2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// null")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("从上面代码可以看到，字符串的 match 方法与正则对象的 exec 方法非常类似：匹配成功返回一个数组，匹配失败返回 null。")]),s._v(" "),t("p",[s._v("如果正则表达式带有 g 修饰符，则该方法与正则对象的 exec 方法行为不同，会一次性返回所有匹配成功的结果。")]),s._v(" "),t("div",{staticClass:"language-javascript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" s "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'abba'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" r "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("a")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-flags"}},[s._v("g")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\ns"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("r"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// ["a", "a"]')]),s._v("\nr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// ["a"]')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("设置正则表达式的 lastIndex 属性，对 match 方法无效，匹配总是从字符串的第一个字符开始。")]),s._v(" "),t("div",{staticClass:"language-javascript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" r "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("a|b")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-flags"}},[s._v("g")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lastIndex "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'xaxb'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("r"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ['a', 'b']")]),s._v("\nr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lastIndex "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 0")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("blockquote",[t("p",[s._v("上面代码表示，设置正则对象的 lastIndex 属性是无效的。")])]),s._v(" "),t("h2",{attrs:{id:"参考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[s._v("#")]),s._v(" 参考")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://wangdoc.com/javascript/stdlib/regexp.html",target:"_blank",rel:"nofollow noopener noreferrer"}},[s._v("RegExp 对象"),t("OutboundLink")],1),s._v(" "),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions",target:"_blank",rel:"nofollow noopener noreferrer"}},[s._v("正则表达式 | MDN"),t("OutboundLink")],1),s._v(" "),t("a",{attrs:{href:"https://regexlearn.com/zh-cn/learn/regex101",target:"_blank",rel:"nofollow noopener noreferrer"}},[s._v("regexlearn | 交互式学习网站"),t("OutboundLink")],1),s._v(" "),t("a",{attrs:{href:"https://codejiaonang.com/#/course/regex_chapter1/0/0",target:"_blank",rel:"nofollow noopener noreferrer"}},[s._v("胶囊编程"),t("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=r.exports},496:function(s,t,a){s.exports=a.p+"assets/img/reg1.bc26f1ec.png"},497:function(s,t,a){s.exports=a.p+"assets/img/reg2.cfbf05eb.png"},498:function(s,t,a){s.exports=a.p+"assets/img/reg3.a7db81e7.png"},499:function(s,t,a){s.exports=a.p+"assets/img/reg4.97e001b4.png"},500:function(s,t,a){s.exports=a.p+"assets/img/reg5.3cca4a50.png"},501:function(s,t,a){s.exports=a.p+"assets/img/reg6.9ba2d351.png"},502:function(s,t,a){s.exports=a.p+"assets/img/reg7.bda3b016.png"},503:function(s,t,a){s.exports=a.p+"assets/img/reg8.b3a358ed.png"},504:function(s,t,a){s.exports=a.p+"assets/img/reg9.e4b8bd3a.png"},505:function(s,t,a){s.exports=a.p+"assets/img/reg10.e5d7c352.png"},506:function(s,t,a){s.exports=a.p+"assets/img/reg11.a3e5ad12.png"},507:function(s,t,a){s.exports=a.p+"assets/img/reg12.e7a15550.png"},508:function(s,t,a){s.exports=a.p+"assets/img/reg13.d01a2683.png"},509:function(s,t,a){s.exports=a.p+"assets/img/reg14.ff734d1e.png"},510:function(s,t,a){s.exports=a.p+"assets/img/reg15.f5ecb469.png"},511:function(s,t,a){s.exports=a.p+"assets/img/reg16.715dec85.png"},512:function(s,t,a){s.exports=a.p+"assets/img/reg17.c514745c.png"},513:function(s,t,a){s.exports=a.p+"assets/img/reg18.984df7fc.png"},514:function(s,t,a){s.exports=a.p+"assets/img/reg19.81566fa3.png"},515:function(s,t,a){s.exports=a.p+"assets/img/reg20.c389fe36.png"},516:function(s,t,a){s.exports=a.p+"assets/img/reg21.37112521.png"},517:function(s,t,a){s.exports=a.p+"assets/img/reg22.50e730da.png"},518:function(s,t,a){s.exports=a.p+"assets/img/reg23.6f5452ba.png"},519:function(s,t,a){s.exports=a.p+"assets/img/reg24.83917a1b.png"},520:function(s,t,a){s.exports=a.p+"assets/img/reg25.95dd611a.png"},521:function(s,t,a){s.exports=a.p+"assets/img/reg26.7daf2188.png"},522:function(s,t,a){s.exports=a.p+"assets/img/reg27.147d4644.png"},523:function(s,t,a){s.exports=a.p+"assets/img/reg28.54142848.png"},524:function(s,t,a){s.exports=a.p+"assets/img/reg29.e45d5a1f.png"},525:function(s,t,a){s.exports=a.p+"assets/img/reg30.f87063db.png"},526:function(s,t,a){s.exports=a.p+"assets/img/reg31.892757d0.png"},527:function(s,t,a){s.exports=a.p+"assets/img/reg32.2ceaf787.png"},528:function(s,t,a){s.exports=a.p+"assets/img/reg33.dc3d48ad.png"}}]);