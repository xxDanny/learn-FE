(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{1100:function(t,s,v){"use strict";v.r(s);var _=v(3),e=Object(_.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"字符串匹配的-kmp-算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串匹配的-kmp-算法"}},[t._v("#")]),t._v(" 字符串匹配的 KMP 算法")]),t._v(" "),s("p",[t._v("字符串匹配是计算机的基本任务之一。")]),t._v(" "),s("p",[t._v('举例来说，有一个字符串"BBC ABCDAB ABCDABCDABDE"，我想知道，里面是否包含另一个字符串"ABCDABD"？')]),t._v(" "),s("p",[t._v("许多算法可以完成这个任务，Knuth-Morris-Pratt 算法（简称 KMP）是最常用的之一。它以三个发明者命名，起头的那个 K 就是著名科学家 Donald Knuth。KMP 是一种最常见的改进算法，它可以在匹配过程中失配的情况下，有效地多往后面跳几个字符，加快匹配速度。")]),t._v(" "),s("p",[t._v("当然我们可以看到这个算法针对的是子串有对称属性，如果有对称属性，那么就需要向前查找是否有可以再次匹配的内容。")]),t._v(" "),s("p",[t._v("在 KMP 算法中有个数组，叫做前缀数组，也有的叫 "),s("code",[t._v("next")]),t._v(" 数组，每一个子串有一个固定的 "),s("code",[t._v("next")]),t._v(" 数组，它记录着字符串匹配过程中失配情况下可以向前多跳几个字符，当然它描述的也是子串的对称程度，程度越高，值越大，当然之前可能出现再匹配的机会就更大。")]),t._v(" "),s("p",[t._v("这个 next 数组的求法是 KMP 算法的关键，但不是很好理解，我在这里用通俗的话解释一下，看到别的地方到处是数学公式推导，看得都蛋疼，这个篇文章仅贡献给不喜欢看数学公式又想理解 KMP 算法的同学。")]),t._v(" "),s("h2",{attrs:{id:"什么是-next-数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是-next-数组"}},[t._v("#")]),t._v(" 什么是 next 数组")]),t._v(" "),s("p",[t._v("next 是用来在子串匹配失败的时候之后，下一次匹配能够跳过的子串字母个数。")]),t._v(" "),s("p",[s("img",{attrs:{src:v(566),alt:""}})]),t._v(" "),s("p",[t._v("如上图，在最后一个字母 c 匹配失败了，我们就读取 c 之前的元素，为 2，代表可以跳过两个字母")]),t._v(" "),s("p",[s("img",{attrs:{src:v(567),alt:""}})]),t._v(" "),s("p",[t._v("为什么可以这样做呢？")]),t._v(" "),s("p",[s("img",{attrs:{src:v(568),alt:""}})]),t._v(" "),s("p",[t._v("子串最后的 AB 和前面跳过的 AB 相同")]),t._v(" "),s("p",[t._v("换句话说对于子串的前四个字符拥有一个共同的前缀和后缀")]),t._v(" "),s("p",[s("img",{attrs:{src:v(569),alt:""}})]),t._v(" "),s("p",[t._v("next 数组的本质就是寻找子串中相同前缀和后缀的长度")]),t._v(" "),s("h2",{attrs:{id:"next-数组计算"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#next-数组计算"}},[t._v("#")]),t._v(" next 数组计算")]),t._v(" "),s("p",[t._v("下面我们以 "),s("code",[t._v("ABABC")]),t._v(" 来说明 next 数组的求值")]),t._v(" "),s("p",[s("img",{attrs:{src:v(570),alt:""}})]),t._v(" "),s("p",[t._v("对于第一个字符，不存在比它还短的前后缀 next 直接为 0")]),t._v(" "),s("p",[s("img",{attrs:{src:v(571),alt:""}})]),t._v(" "),s("p",[t._v("也不存在相同的前后缀")]),t._v(" "),s("p",[s("img",{attrs:{src:v(572),alt:""}})]),t._v(" "),s("p",[s("img",{attrs:{src:v(573),alt:""}})]),t._v(" "),s("p",[t._v("对于前四个字符，AB 是最长的前后缀，所以为 2")]),t._v(" "),s("p",[s("img",{attrs:{src:v(574),alt:""}})]),t._v(" "),s("p",[t._v("用一个例子来解释，下面是一个子串的 next 数组的值，可以看到这个子串的对称程度很高，所以 next 值都比较大。")]),t._v(" "),s("p",[s("img",{attrs:{src:v(575),alt:""}})]),t._v(" "),s("h2",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),s("ul",[s("li",[s("p",[s("a",{attrs:{href:"http://jakeboxer.com/blog/2009/12/13/the-knuth-morris-pratt-algorithm-in-my-own-words/",target:"_blank",rel:"nofollow noopener noreferrer"}},[t._v("The Knuth-Morris-Pratt Algorithm in my own words"),s("OutboundLink")],1)])]),t._v(" "),s("li",[s("p",[s("a",{attrs:{href:"https://www.youtube.com/watch?v=af1oqpnH1vA",target:"_blank",rel:"nofollow noopener noreferrer"}},[t._v("最浅显易懂的 KMP 算法讲解 | 视频"),s("OutboundLink")],1)])])]),t._v(" "),s("p",[s("img",{attrs:{src:v(576),alt:""}})]),t._v(" "),s("p",[t._v("首先，字符串 "),s("code",[t._v("BBC ABCDAB ABCDABCDABDE")]),t._v(" 的第一个字符与搜索词 "),s("code",[t._v("ABCDABD")]),t._v(" 的第一个字符，进行比较。因为 B 与 A 不匹配，所以搜索词后移一位。")]),t._v(" "),s("p",[s("img",{attrs:{src:v(577),alt:""}})]),t._v(" "),s("p",[t._v("因为 B 与 A 不匹配，搜索词再往后移。")]),t._v(" "),s("p",[s("img",{attrs:{src:v(578),alt:""}})]),t._v(" "),s("p",[t._v("就这样，直到字符串有一个字符，与搜索词的第一个字符相同为止。")]),t._v(" "),s("p",[s("img",{attrs:{src:v(579),alt:""}})]),t._v(" "),s("p",[t._v("接着比较字符串和搜索词的下一个字符，还是相同。")]),t._v(" "),s("p",[s("img",{attrs:{src:v(580),alt:""}})]),t._v(" "),s("p",[t._v("直到字符串有一个字符，与搜索词对应的字符不相同为止")]),t._v(" "),s("p",[s("img",{attrs:{src:v(581),alt:""}})]),t._v(" "),s("p",[t._v('这时，最自然的反应是，将搜索词整个后移一位，再从头逐个比较。这样做虽然可行，但是效率很差，因为你要把"搜索位置"移到已经比较过的位置，重比一遍。')]),t._v(" "),s("p",[s("img",{attrs:{src:v(582),alt:""}})]),t._v(" "),s("p",[t._v("一个基本事实是，当空格与 D 不匹配时，你其实知道前面六个字符是 "),s("code",[t._v("ABCDAB")]),t._v(' 。KMP 算法的想法是，设法利用这个已知信息，不要把"搜索位置"移回已经比较过的位置，继续把它向后移，这样就提高了效率。')]),t._v(" "),s("p",[s("img",{attrs:{src:v(583),alt:""}})]),t._v(" "),s("p",[t._v("怎么做到这一点呢？可以针对搜索词，算出一张《部分匹配表》（Partial Match Table）。这张表是如何产生的，后面再介绍，这里只要会用就可以了。")]),t._v(" "),s("p",[s("img",{attrs:{src:v(584),alt:""}})]),t._v(" "),s("p",[t._v("已知空格与 D 不匹配时，前面六个字符 "),s("code",[t._v("ABCDAB")]),t._v(' 是匹配的。查表可知，最后一个匹配字符 B 对应的"部分匹配值"为 2，因此按照下面的公式算出向后移动的位数：')]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("　移动位数 = 已匹配的字符数 - 对应的部分匹配值\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("因为 6 - 2 等于 4，所以将搜索词向后移动 4 位。")]),t._v(" "),s("p",[s("img",{attrs:{src:v(585),alt:""}})]),t._v(" "),s("p",[t._v('因为空格与Ｃ不匹配，搜索词还要继续往后移。这时，已匹配的字符数为 2（"AB"），对应的"部分匹配值"为 0。所以，移动位数 = 2 - 0，结果为 2，于是将搜索词向后移 2 位。')]),t._v(" "),s("p",[s("img",{attrs:{src:v(586),alt:""}})]),t._v(" "),s("p",[t._v("因为空格与 A 不匹配，继续后移一位")]),t._v(" "),s("p",[s("img",{attrs:{src:v(587),alt:""}})]),t._v(" "),s("p",[t._v("逐位比较，直到发现 C 与 D 不匹配。于是，移动位数 = 6 - 2，继续将搜索词向后移动 4 位。")]),t._v(" "),s("p",[t._v("逐位比较，直到搜索词的最后一位，发现完全匹配，于是搜索完成。如果还要继续搜索（即找出全部匹配），移动位数 = 7 - 0，再将搜索词向后移动 7 位，这里就不再重复了。")]),t._v(" "),s("p",[t._v("下面介绍《部分匹配表》是如何产生的。")]),t._v(" "),s("p",[t._v('首先，要了解两个概念："前缀"和"后缀"。 "前缀"指除了最后一个字符以外，一个字符串的全部头部组合；"后缀"指除了第一个字符以外，一个字符串的全部尾部组合。')]),t._v(" "),s("p",[s("img",{attrs:{src:v(588),alt:""}})]),t._v(" "),s("p",[t._v('"部分匹配值"就是"前缀"和"后缀"的最长的共有元素的长度。以 '),s("code",[t._v("ABCDABD")]),t._v(" 为例")]),t._v(" "),s("p",[s("img",{attrs:{src:v(589),alt:""}})]),t._v(" "),s("ul",[s("li",[s("code",[t._v("A")]),t._v("的前缀和后缀都为空集，共有元素的长度为 0；")]),t._v(" "),s("li",[s("code",[t._v("AB")]),t._v("的前缀为 "),s("code",[t._v("[A]")]),t._v("，后缀为"),s("code",[t._v("[B]")]),t._v("，共有元素的长度为 0；")]),t._v(" "),s("li",[s("code",[t._v("ABC")]),t._v("的前缀为 "),s("code",[t._v("[A, AB]")]),t._v("，后缀为 "),s("code",[t._v("[BC, C]")]),t._v("，共有元素的长度 0；")]),t._v(" "),s("li",[s("code",[t._v('"ABCD')]),t._v("的前缀为 "),s("code",[t._v("[A, AB, ABC]")]),t._v("，后缀为 "),s("code",[t._v("[BCD, CD, D]")]),t._v("，共有元素的长度为 0；")]),t._v(" "),s("li",[s("code",[t._v("ABCDA")]),t._v("的前缀为 "),s("code",[t._v("[A, AB, ABC, ABCD]")]),t._v("，后缀为 "),s("code",[t._v("[BCDA, CDA, DA, A]")]),t._v("，共有元素为"),s("code",[t._v('"A"')]),t._v("，长度为 1；")]),t._v(" "),s("li",[s("code",[t._v('"ABCDAB')]),t._v("的前缀为 "),s("code",[t._v("[A, AB, ABC, ABCD, ABCDA]")]),t._v("，后缀为 "),s("code",[t._v("[BCDAB, CDAB, DAB, AB, B]")]),t._v('，共有元素为"AB"，长度为 2；')]),t._v(" "),s("li",[s("code",[t._v("ABCDABD")]),t._v("的前缀为 "),s("code",[t._v("[A, AB, ABC, ABCD, ABCDA, ABCDAB]")]),t._v("，后缀为 "),s("code",[t._v("[BCDABD, CDABD, DABD, ABD, BD, D]")]),t._v("，共有元素的长度为 0。")])]),t._v(" "),s("p",[s("img",{attrs:{src:v(590),alt:""}})]),t._v(" "),s("p",[t._v('"部分匹配"的实质是，有时候，字符串头部和尾部会有重复。比如，"ABCDAB"之中有两个"AB"，那么它的"部分匹配值"就是 2（"AB"的长度）。搜索词移动的时候，第一个"AB"向后移动 4 位（字符串长度-部分匹配值），就可以来到第二个"AB"的位置。')])])}),[],!1,null,null,null);s.default=e.exports},566:function(t,s,v){t.exports=v.p+"assets/img/19.80a55920.png"},567:function(t,s,v){t.exports=v.p+"assets/img/20.e4379345.png"},568:function(t,s,v){t.exports=v.p+"assets/img/21.ec980218.png"},569:function(t,s,v){t.exports=v.p+"assets/img/22.a3afd215.png"},570:function(t,s,v){t.exports=v.p+"assets/img/23.860bfb6b.png"},571:function(t,s,v){t.exports=v.p+"assets/img/24.39f672ce.png"},572:function(t,s,v){t.exports=v.p+"assets/img/25.ecb47b42.png"},573:function(t,s,v){t.exports=v.p+"assets/img/26.46a6b5eb.png"},574:function(t,s,v){t.exports=v.p+"assets/img/27.9346f19b.png"},575:function(t,s,v){t.exports=v.p+"assets/img/18.b51fc82b.png"},576:function(t,s,v){t.exports=v.p+"assets/img/3.9381952b.png"},577:function(t,s,v){t.exports=v.p+"assets/img/4.d3449114.png"},578:function(t,s,v){t.exports=v.p+"assets/img/5.ce0f626c.png"},579:function(t,s,v){t.exports=v.p+"assets/img/6.16bbf398.png"},580:function(t,s,v){t.exports=v.p+"assets/img/7.ae012815.png"},581:function(t,s,v){t.exports=v.p+"assets/img/8.0c085129.png"},582:function(t,s,v){t.exports=v.p+"assets/img/9.aa685b71.png"},583:function(t,s,v){t.exports=v.p+"assets/img/10.e6a743f2.png"},584:function(t,s,v){t.exports=v.p+"assets/img/11.ac7476fa.png"},585:function(t,s,v){t.exports=v.p+"assets/img/12.732d6cde.png"},586:function(t,s,v){t.exports=v.p+"assets/img/13.cbe59461.png"},587:function(t,s,v){t.exports=v.p+"assets/img/14.e0f376f6.png"},588:function(t,s,v){t.exports=v.p+"assets/img/15.897101a1.png"},589:function(t,s,v){t.exports=v.p+"assets/img/16.186f30d3.png"},590:function(t,s,v){t.exports=v.p+"assets/img/17.02370a6f.png"}}]);